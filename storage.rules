rules_version = '2';

// Craft rules based on data in your Firestore database
// allow write: if firestore.get(
//    /databases/(default)/documents/users/$(request.auth.uid)).data.isAdmin;
service firebase.storage {
  match /b/{bucket}/o {
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}



const GraphComponent = () => {
    const [activeNode, setActiveNode] = useState(null);

    const handleNodeClick = (nodeId) => {
        setActiveNode(nodeId === activeNode ? null : nodeId);
    };

    return (
        <Box
            sx={{
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                height: '100%',
                width: '100%',
                position: 'relative',
                border: '1px solid red',
            }}
        >
            <motion.div
                whileTap={{ scale: 0.8 }}
                layout
                onClick={() => handleNodeClick('personalized')}
                initial={{ scale: 1 }}
                animate={{
                    scale: activeNode === 'personalized' ? 0.5 : 1,
                }}
                style={{
                    display: 'flex',
                    justifyContent: 'center',
                    alignItems: 'center',
                    width: 150,
                    height: 150,
                    borderRadius: '50%',
                    backgroundColor: 'skyblue',
                    cursor: 'pointer',
                }}
            >
                <Typography
                    variant="h6"
                    sx={{
                        textAlign: 'center',
                        fontSize:
                            activeNode === 'personalized' ? '0.8rem' : '1rem',
                        maxWidth: '80%',
                    }}
                >
                    Your Personalized Questions
                </Typography>
            </motion.div>

            {activeNode === 'personalized' && (
                <AnimatePresence>
                    {sampleData.map((category, index) => (
                        <motion.div
                            key={category.id}
                            initial={{ opacity: 0, scale: 0 }}
                            animate={{ opacity: 1, scale: 1 }}
                            exit={{ opacity: 0, scale: 0 }}
                            onClick={() => handleNodeClick(category.id)}
                            style={{
                                display: 'flex',
                                justifyContent: 'center',
                                alignItems: 'center',
                                width: 100,
                                height: 100,
                                borderRadius: '50%',
                                backgroundColor: 'lightgreen',
                                cursor: 'pointer',
                                position: 'absolute',
                                left: `calc(50% + ${
                                    200 *
                                    Math.cos(
                                        (index * 2 * Math.PI) /
                                            sampleData.length
                                    )
                                }px - 50px)`,
                                top: `calc(50% + ${
                                    200 *
                                    Math.sin(
                                        (index * 2 * Math.PI) /
                                            sampleData.length
                                    )
                                }px - 50px)`,
                                transform: 'translate(-50%, -50%)',
                            }}
                        >
                            <Typography
                                variant="body2"
                                sx={{ textAlign: 'center', padding: '5px' }}
                            >
                                {category.category}
                            </Typography>
                        </motion.div>
                    ))}
                </AnimatePresence>
            )}

            {sampleData.map((category) =>
                category.questions && activeNode === category.id ? (
                    <AnimatePresence key={category.id}>
                        {category.questions.map((question, index) => (
                            <motion.div
                                key={index}
                                initial={{ opacity: 0, scale: 0 }}
                                animate={{ opacity: 1, scale: 1 }}
                                exit={{ opacity: 0, scale: 0 }}
                                onClick={() => console.log(question)}
                                style={{
                                    display: 'flex',
                                    justifyContent: 'center',
                                    alignItems: 'center',
                                    width: 80,
                                    height: 80,
                                    borderRadius: '50%',
                                    backgroundColor: 'lightcoral',
                                    cursor: 'pointer',
                                    position: 'absolute',
                                    left: `${
                                        50 +
                                        60 *
                                            Math.cos(
                                                (index * 2 * Math.PI) /
                                                    category.questions.length
                                            )
                                    }%`,
                                    top: `${
                                        50 +
                                        60 *
                                            Math.sin(
                                                (index * 2 * Math.PI) /
                                                    category.questions.length
                                            )
                                    }%`,
                                }}
                            >
                                <Typography variant="body1">
                                    {question}
                                </Typography>
                            </motion.div>
                        ))}
                    </AnimatePresence>
                ) : null
            )}
        </Box>
    );
};

export default GraphComponent;
